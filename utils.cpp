#include "proto.h"

int count_mem = 0;

unsigned char cadenas0[714] ={
0xD8,0xD8,0xD8,0x99,0x99,0x99,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x99,0x99,0x99,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x99,0x99,0x99,0x00,0x00,0x00,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,
0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x99,0x99,0x99,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFC,0xFC,0xFC,
0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0xF3,0xF3,0xF3,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0xF3,0xF3,0xF3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x62,0x62,0x62,
0xF3,0xF3,0xF3,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xF3,0xF3,0xF3,0x00,0x00,0x00,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0x62,0x62,0x62,0xF3,0xF3,0xF3,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x62,0x62,0x62,0xF3,0xF3,0xF3,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x62,0x62,0x62,
0xF3,0xF3,0xF3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x6E,0x6E,0x6E,
0x56,0x56,0x56,0x62,0x62,0x62,0x62,0x62,0x62,0x00,0x00,0x00,0xB6,0xB6,0xB6,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0x6E,0x6E,0x6E,0x6E,0x6E,0x6E,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,
0x56,0x56,0x56,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x6E,0x6E,0x6E,0x6E,0x6E,0x6E,0xD1,0xD2,0xD2,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0xA7,0xA8,0xA8,
0xD1,0xD2,0xD2,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x6E,0x6E,0x6E,
0x6E,0x6E,0x6E,0xD1,0xD2,0xD2,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,
0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,0xD1,0xD2,0xD2,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0x6E,0x6E,0x6E,0x6E,0x6E,0x6E,0xD1,0xD2,0xD2,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0xA7,0xA8,0xA8,0xD1,0xD2,0xD2,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x6E,0x6E,0x6E,0xD1,0xD2,0xD2,
0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,
0xD1,0xD2,0xD2,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xDC,0xDC,0x00,
0x4A,0x4A,0x4A,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0x96,0x96,0x00,0xDC,0xDC,0x00,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,
0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x96,0x96,0x00,0xFF,0xFF,0x00,
0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF};

unsigned char cadenas1[714] ={
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x99,0x99,0x99,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x99,0x99,0x99,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x99,0x99,0x99,0x00,0x00,0x00,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,
0xEE,0xEF,0xEF,0xE3,0xE4,0xE4,0x00,0x00,0x00,0x99,0x99,0x99,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFD,0xFD,0xFD,0xE3,0xE4,0xE4,
0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xEE,0xEF,0xEF,0x7B,0x7B,0x7B,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
0xF5,0xF5,0xF5,0xB6,0xB6,0xB6,0x00,0x00,0x00,0x00,0x00,0x00,0x53,0x54,0x54,0xEE,0xEF,0xEF,
0x7B,0x7B,0x7B,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x00,0x00,0x00,0xF5,0xF5,0xF5,0xB6,0xB6,0xB6,0x00,0x00,0x00,0xD8,0xD8,0xD8,
0x8F,0x8F,0x8F,0xEE,0xEF,0xEF,0x7B,0x7B,0x7B,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xE3,0xE4,0xE4,0xB6,0xB6,0xB6,
0x00,0x00,0x00,0x00,0x00,0x00,0x8F,0x8F,0x8F,0xEE,0xEF,0xEF,0x7B,0x7B,0x7B,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x7B,0x7B,0x7B,0x92,0x92,0x92,
0x32,0x32,0x32,0x92,0x92,0x92,0x00,0x00,0x00,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0x92,0x92,0x92,
0x32,0x32,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
0x7B,0x7B,0x7B,0x7B,0x7B,0x7B,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,
0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0x00,0x00,0x00,0x7B,0x7B,0x7B,0x7B,0x7B,0x7B,0xD1,0xD2,0xD2,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0xA7,0xA8,0xA8,
0xD1,0xD2,0xD2,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x7B,0x7B,0x7B,0x7B,0x7B,0x7B,
0xD1,0xD2,0xD2,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,
0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,0xD1,0xD2,0xD2,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,
0x7B,0x7B,0x7B,0x7B,0x7B,0x7B,0xD1,0xD2,0xD2,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0xA7,0xA8,0xA8,0xD1,0xD2,0xD2,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0x00,0x00,0x00,0x1A,0x1A,0x1A,0x7B,0x7B,0x7B,0xD1,0xD2,0xD2,0xFD,0xFD,0xFD,
0xFD,0xFD,0xFD,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,0xEE,0xEF,0xEF,
0xD1,0xD2,0xD2,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xDC,0xDC,0x00,0x1A,0x1A,0x1A,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,
0x96,0x96,0x00,0xDC,0xDC,0x00,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,
0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0xFF,0xFF,0xB1,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x96,0x96,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,
0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF};

void
SetStringLen(BTextControl *xt,int nb)
{
	xt->TextView()->SetMaxBytes(nb);
}

BButton *
CreateButton(BRect rct,char *title,int msg)
{
	BButton *bt;

	bt = new BButton(rct,"",title,new BMessage(msg));

	return bt;
}

BView *
CreateView(BRect rct)
{
	BView *xt;

	xt = new BView(rct,"",B_FOLLOW_ALL,B_WILL_DRAW);

	xt->SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
	
	return xt;
}

BTextControl *
CreateInteger(BRect rct,char *title,int msg,int div)
{
	BTextControl *bt;
	MyFilterInteger *filter;

	bt = new BTextControl(rct,"",title,"",new BMessage(msg));

	if	(filter = new MyFilterInteger())
	{
		bt->TextView()->AddFilter((BMessageFilter *)filter);
	}

	SetDivider(bt,div);

	return bt;
}

BTextControl *
CreateString(BRect rct,char *title,int msg,int div)
{
	BTextControl *bt;

	bt = new BTextControl(rct,"",title,"",new BMessage(msg));

	SetDivider(bt,div);

	return bt;
}

SpinControl *
CreateSpin(BRect rct,char *title,int msg,int min,int max,int val,int div)
{
	SpinControl *bt;
	
	bt = new SpinControl(rct,"",title,new BMessage(msg),min,max,val,1);

	SetSpinDivider(bt,div);

	return bt;
}

BMenu *
CreateMenu(BWindow *wi)
{
	BMenu *mn;
	
	if (mn = new BMenu(""))
	{
		mn->SetRadioMode(true);
		mn->SetLabelFromMarked(true);
		mn->SetTargetForItems(wi);

		return(mn);	
	}
	
	return NULL;
}

BMenu *
CreateMenu(BWindow *wi,char **tab,int msg,int sel)
{
	BMenu *mn;
	BMenuItem *it;
	char *st;
	int k = 0;
	
	if (mn = new BMenu(""))
	{
		mn->SetRadioMode(true);
		mn->SetLabelFromMarked(true);
		mn->SetTargetForItems(wi);

		if (tab)
		{
			while (st = tab[k++])
			{
				AddItemInMenu(mn,st,msg);				
			}
		}

		if (it = mn->ItemAt(sel))
		{
			it->SetMarked(true);
		}
		
		return(mn);	
	}
	
	return NULL;
}

void
AddItemInMenu(BMenu *mn,char *str,int what)
{
	BMenuItem 	*it;

	if (it = new BMenuItem(str,new BMessage(what)))
	{
		mn->AddItem(it);	
	}
}

void
SetChoiceInMenu(BMenu *mn,int chx,bool check)
{
	BMenuItem *it;
	
	if (it = mn->ItemAt(chx))
	{
		it->SetMarked(check);	
	}
}	

BCheckBox *
CreateCheck(BRect rct,char *title,int msg,bool check)
{
	BCheckBox *bt;

	bt = new BCheckBox(rct,"",title,new BMessage(msg));

	bt->SetValue(check);

	return bt;
}

BMenuField *
CreateMx(BRect rct,char *title,BMenu *mn,int div = 0)
{
	BMenuField  *bt;

	bt = new BMenuField(rct,"",title,mn);

	SetDivider(bt,div);

	return bt;
}

BRadioButton *
CreateRadio(BRect rct,char *title,int msg)
{
	BRadioButton *bt;

	bt = new BRadioButton(rct,"",title,new BMessage(msg));

	return bt;
}

void
*MyAlloc(int size)
{
	char *xt;
	
	if	(xt = malloc(size))
	{
		++count_mem;

		memset(xt,0,size);	
	
		return(xt);
	}

	return(NULL);
}

char *
MyStringStr(char *str)
{
	void *pt;
	int	k;

	if (str && (k = strlen(str)))
	{
		if 	(pt = MyAlloc(k + 1))
		{
			strcpy(pt,str);

			return(pt);	
		}
	}

	return "";
}

void
MyFree(void *dat)
{
	if	(dat)
	{
		free(dat);
	
		--count_mem;
	}
		else
	{
		exit(0);
	}	
}

int
SysAlert(char *str,char *ok)
{
	char buf[257],buf1[257];
	char *pt,*st0 = &buf1[0],*st1 = NULL,*st2 = NULL;
	BAlert *xt;
	int ret = -2;

	strcpy(&buf[0],str);
	strcpy(&buf1[0],ok);

	if	(&buf1[0])
	{
		if (pt = strchr(&buf1[0],'|'))
		{
			*pt++ = '\0';

			st1 = pt;				

			if (pt = strchr(st1,'|'))
			{
				*pt++ = '\0';

				st2 = pt;				
			}
		}
	}	

	if (xt = new BAlert("",&buf[0],st0,st1,st2,B_WIDTH_AS_USUAL,B_OFFSET_SPACING,B_WARNING_ALERT))
	{
		xt->SetShortcut(0,B_ESCAPE);
	
		ret = xt->Go();
	}

	return(ret);
}

MyFilterInteger::MyFilterInteger():BMessageFilter(B_ANY_DELIVERY,B_ANY_SOURCE,B_KEY_DOWN,NULL)
{
}

bool 
accept_char(int cr)
{
	switch(cr)
	{
		case	B_BACKSPACE:
		case	B_ENTER:
		case	B_TAB:
		case	B_UP_ARROW:
		case	B_DOWN_ARROW:
		case	B_LEFT_ARROW:
		case	B_RIGHT_ARROW:
		case	B_DELETE:
		case	B_HOME:
		case	B_END:
		case	B_PAGE_DOWN:
		case	B_PAGE_UP:	return(true);	break;
	}

	return(false);
}

filter_result
MyFilterInteger::Filter(BMessage *message,BHandler **target)
{
	BTextControl *gt = ((BTextControl *)((BView *)*target)->Parent());
	BTextView *tx = (BTextView *)gt->TextView();
	int8 cr;

	if (!tx->IsEditable())
	{
		return B_SKIP_MESSAGE;
	}

	message->FindInt8("byte",&cr);
		
	if (cr == 119)
	{
		if (modifiers() & B_COMMAND_KEY)
		{
			return B_DISPATCH_MESSAGE;
		}
	}	

	if (cr >= '0' && cr <= '9')	return B_DISPATCH_MESSAGE;
	if (accept_char(cr)) 		return B_DISPATCH_MESSAGE;
	
	return B_SKIP_MESSAGE;
}			

BPictureButton *
CreateButton(BRect rct,char *a0,char *a1,int msg)
{
	BPictureButton *but;
	BPicture *on,*off;
	BBitmap *downBitmap, *upBitmap;

	downBitmap = new PrefilledBitmap(BRect(0,0,13,16),B_RGB32,&cadenas0[0],0,false,false);
	upBitmap = new PrefilledBitmap(BRect(0,0,13,16),B_RGB32,&cadenas1[0],0,false,false);

	BWindow* x= new BWindow(BRect(40,40,123,123),"", B_TITLED_WINDOW,0);
			
	BView *tempView = new BView(BRect(20,20,63,63),"temp",0,0);
			
	x->AddChild(tempView);

	tempView->SetViewColor(B_TRANSPARENT_COLOR);

	tempView->BeginPicture(new BPicture); 
	tempView->DrawBitmap(upBitmap);
	on = tempView->EndPicture();

	tempView->BeginPicture(new BPicture); 
	tempView->DrawBitmap(downBitmap);
	off = tempView->EndPicture();

	but = new BPictureButton(rct,"",off, on,new BMessage(msg),B_TWO_STATE_BUTTON,B_FOLLOW_LEFT|B_FOLLOW_TOP,B_WILL_DRAW);

	x->RemoveChild(tempView);
	delete tempView;
	delete x;

	return but;
}
