#include "proto.h"
#include "prjwin.h"

extern int mods;

unsigned char window_icon[2304] ={
0xFF,0xFF,0xFF,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,
0x86,0x86,0x86,0xFF,0xFF,0xFF,0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0x62,0x62,0x62,0x3E,0x3E,0x3E,
0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,
0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x4A,0x4A,0x4A,0xFF,0xFF,0x25,
0xFF,0xFF,0x25,0xFF,0xFF,0x25,0xFF,0xFF,0x25,0xFF,0xFF,0x25,0xFF,0xFF,0x25,0x4A,0x4A,0x4A,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,
0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x4A,0x4A,0x4A,0xFF,0xD4,0x8E,0xFF,0xD4,0x8E,0xFF,0xD4,0x8E,0xFF,0xD4,0x8E,0xFF,0xD4,0x8E,
0xFF,0xD4,0x8E,0x4A,0x4A,0x4A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x4A,0x4A,0x4A,0xFF,0xB8,0x48,0xFF,0xB8,0x48,0xFF,0xB8,0x48,
0xFF,0xB8,0x48,0xFF,0xB8,0x48,0xFF,0xB8,0x48,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,
0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,
0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0xB6,0xB6,0xB6,
0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,
0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,
0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0xB6,0x1A,0x1A,0x1A,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,
0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0xDA,0xDA,0xDA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0xDA,0xDA,0xDA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0xDA,0xDA,0xDA,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,
0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0xDA,0xDA,0xDA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0xDA,0xDA,0xDA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0xDA,0xDA,0xDA,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,
0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0xDA,0xDA,0xDA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0xDA,0xDA,0xDA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0xDA,0xDA,0xDA,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,
0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,
0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,
0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,0xDA,
0xDA,0xDA,0xDA,0x1A,0x1A,0x1A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,
0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,
0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,
0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0xF2,0xF2,0xF2,
0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0x62,0x62,0x62,0x3E,0x3E,0x3E,
0x86,0x86,0x86,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,0xE6,
0x62,0x62,0x62,0x3E,0x3E,0x3E,0x86,0x86,0x86,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,
0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,
0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,
0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,
0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,
0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x62,0x3E,0x3E,0x3E,0xFF,0xFF,0xFF,0x3E,0x3E,0x3E,
0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,
0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,
0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,
0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,
0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0xFF,0xFF,0xFF};

PrefilledBitmap::PrefilledBitmap(BRect bounds, color_space space, const void *data, int32 length,
	bool acceptsViews, bool needsContiguousMemory)
: BBitmap(bounds, space, acceptsViews, needsContiguousMemory)
{
	if(length == 0)
	{
		if(space == B_CMAP8)
			length = ((int32(bounds.right-bounds.left+1)+3)&0xFFFFFFFC)*int32(bounds.bottom-bounds.top+1);
		else if(space == B_RGB32)
			length = int32(bounds.right-bounds.left+1)*int32(bounds.bottom-bounds.top+1)*3;
	}
	SetBits(data, length, 0, space);
}

PrefilledBitmap::~PrefilledBitmap()
{
}

MyLv::MyLv(BRect rct):BOutlineListView(rct,"",B_SINGLE_SELECTION_LIST,B_FOLLOW_ALL)
{
	BFont font;

	GetFont(&font);

	font.SetFlags(B_DISABLE_ANTIALIASING);

	SetFont(&font,B_FONT_FLAGS);
}

MyLv::~MyLv(void)
{
}

void
MyLv::KeyDown(const char *bytes,int32 nb)
{
	if (nb == 1)
	{
		switch(bytes[0])
		{
			case	B_DELETE:
			{
				BMessage msg(1000);

				Window()->PostMessage(&msg);
			}
		}
	}
	
	BOutlineListView::KeyDown(bytes,nb);
}

void
MyLv::MouseDown(BPoint pt)
{
	uint32 but;
	BPoint where = pt;

	if (Window()->CurrentMessage()->FindInt32(&buttons[0], (int32 *)&but) == B_NO_ERROR)
	{
		switch(but)
		{
			case B_SECONDARY_MOUSE_BUTTON:
			{
				if (CurrentSelection() != -1)
				{
					BPopUpMenu* popup = new BPopUpMenu("");

					popup->SetAsyncAutoDestruct(true);

					popup->SetRadioMode(false);

					popup->AddItem(new BMenuItem(GetMessage(msg_delete), new BMessage(1000)));

					popup->SetTargetForItems(Window());

					ConvertToScreen(&where); 

					popup->Go(where,true,false,false);

					return;
				}
			}
			break;
		}
	}

	BOutlineListView::MouseDown(pt);
}			

void
MyLv::SelectionChanged(void)
{
	WrkWindow *wi;
	TListItem *it;
	int nb;

	BOutlineListView::SelectionChanged();

	if (wi = DefWin)
	{
		if ((nb = CurrentSelection()) >= 0)
		{
			if (it = (TListItem *)ItemAt(nb))
			{
				wi->Lock();

				if (it->OutlineLevel())
				{
					if (wi->sellist.CountItems())
					{
						if	(!(mods & B_SHIFT_KEY))
						{
							wi->UnSelectAll(false);
						}
					}
						
					wi->AddGadget((struct MyGadget *)it->gad,true,true);	
				}
					else
				{
					wi->UnSelectAll(false);

					it->win->Activate();
				}	

				wi->Unlock();
			}	
		}
	}
}

void
MyLv::FrameResized(float wi,float he)
{
	int nb;

	BOutlineListView::FrameResized(wi,he);

	if ((nb = CurrentSelection()) >= 0)
	{
		InvalidateItem(nb);
	}
}

PrjWindow::PrjWindow(BRect rct):BWindow(rct,GetMessage(msg_project),B_TITLED_WINDOW,B_WILL_ACCEPT_FIRST_CLICK|B_NOT_ZOOMABLE|B_ASYNCHRONOUS_CONTROLS)
{
	BRect rect(Bounds());

	rect.right -= B_V_SCROLL_BAR_WIDTH;

	xt = new MyLv(rect);

	BScrollView *scroll = new BScrollView("",xt,B_FOLLOW_ALL,0,true,true);

	AddChild(scroll);
}

PrjWindow::~PrjWindow(void)
{
	PrjWin = NULL;
}

void
PrjWindow::WindowActivated(bool act)
{
	BWindow::WindowActivated(act);

	if (act)
	{
		xt->MakeFocus(true);
	}
}

void
PrjWindow::FrameResized(float wi,float he)
{
	BWindow::FrameResized(wi,he);

	prefs.projrect = Frame();
}

void
PrjWindow::FrameMoved(BPoint pt)
{
	BWindow::FrameMoved(pt);

	prefs.projrect = Frame();
}

void
PrjWindow::MessageReceived(BMessage *msg)
{
	int nb;
	TListItem 	*it;
	WrkWindow	*wi;

	switch(msg->what)
	{
		case	1000:
		{
			if ((nb = xt->CurrentSelection()) >= 0)
			{
				if (it = (TListItem *)xt->ItemAt(nb))
				{
					if (wi = DefWin)
					{
						if (!it->OutlineLevel())
						{
							if (wi->QuitRequested())
							{
								wi->RemoveProjet();

								wi->Lock();
								wi->Quit();
							}
						}
							else
						{
							if (wi->DeleteGadget())
							{
								RemoveGadget(it->win,it->gad);
							}
						}
					}	
				}
			}				
		}
		break;
		
		default:
		{
			BWindow::MessageReceived(msg);
		}
		break;
	}
}	

bool
PrjWindow::QuitRequested(void)
{
	return true;
}

TListItem::TListItem(WrkWindow *wi,struct MyGadget *gd,BBitmap *ic,char *str):BListItem()
{
	win = wi;
	gad = gd;
	icon = ic;
	name = MyStringStr(str);
}

TListItem::~TListItem()
{
	if (icon)
	{
		delete icon;
	}

	if (name)
	{
		free(name);
	}
}

void TListItem::DrawItem(BView *view, BRect rect,bool complete)
{
	float		offset = 20;
	BFont		font;
	font_height	finfo;

	view->GetFont(&font);

	if (IsSelected())
	{
		view->SetHighColor(91,162,187);

		view->FillRect(rect);

		view->SetHighColor(255,0,0);

		view->StrokeRect(rect);
	}
		else
	{
		view->SetHighColor(255,255,255);

		view->FillRect(rect);
	}

	if (icon)
	{
		view->SetDrawingMode(B_OP_OVER);
		view->DrawBitmap(icon, BPoint(rect.left + 3, rect.top + 4));
		view->SetDrawingMode(B_OP_COPY);
		offset = rect.left + icon->Bounds().Width() + 8;
	}

	font.GetHeight(&finfo);

	view->SetHighColor(0,0,0);

	view->MovePenTo(offset,
		rect.top + ((rect.Height() - (finfo.ascent + finfo.descent + finfo.leading)) / 2) +
					(finfo.ascent + finfo.descent) - 2);
	view->DrawString(name);
}

void TListItem::Update(BView *owner, const BFont *finfo)
{
	BListItem::Update(owner, finfo);

	SetHeight(29);
}

void
PrjWindow::AddWindow(WrkWindow *wi,const char *name)
{
	TListItem *it;
	BBitmap *ic;

	Lock();

	ic = new PrefilledBitmap(BRect(0,0,31,23),B_RGB32,&window_icon[0],0,false,false);

	xt->AddItem(it = new TListItem(wi,NULL,ic,(char *)name));

	Unlock();
}

void
PrjWindow::AddGadget(WrkWindow *wi,struct MyGadget *gd,char *name,int type,struct MyGadget *inside = NULL)
{
	TListItem *nw,*it;
	BBitmap *ic;

	int k;
	
	Lock();

	for (k = 0; k < xt->CountItems(); k++)
	{
		if (it = (TListItem *)xt->ItemAt(k))
		{
			if (!it->OutlineLevel())
			{
				void *dat;

				if (it->win == wi)
				{
					switch(type)
					{
						case	TEDIT_KIND:
						case	TEDIT_HORIZ_KIND:
						case	TEDIT_VERT_KIND:
						case	TEDIT_ALL_KIND:			dat = &tedit_icon[0];	break;
						case	LISTVIEW_KIND:
						case	LISTVIEW_HORIZ_KIND:
						case	LISTVIEW_VERT_KIND:
						case	LISTVIEW_ALL_KIND:		dat = &listview_icon[0];	break;
						case	OUTLISTVIEW_KIND:
						case	OUTLISTVIEW_HORIZ_KIND:
						case	OUTLISTVIEW_VERT_KIND:
						case	OUTLISTVIEW_ALL_KIND:	dat = &outlistview_icon[0];	break;
						case	BUTTON_KIND:			dat = &button_icon[0];		break;
						case	CHECKBOX_KIND:			dat = &checkbox_icon[0];	break;
						case	BOX_KIND:				dat = &box_icon[0];			break;
						case	COLOR_KIND:				dat = &color_icon[0];		break;
						case	MENU_KIND:				dat = &menu_icon[0];		break;
						case	MX_KIND:				dat = &mx_icon[0];			break;
						case	RADIO_KIND:				dat = &radio_icon[0];		break;
						case	STATUSBAR_KIND:			dat = &status_icon[0];		break;
						case	SLIDER_VERT_KIND:
						case	SLIDER_HORIZ_KIND:		dat = &slider_icon[0];		break;
						case	SCROLLER_HORIZ_KIND:
						case	SCROLLER_VERT_KIND:		dat = &scroller_icon[0];	break;
						case	TAB_KIND:				dat = &tab_icon[0];			break;
						case	NUMBER_KIND:
						case	TEXT_KIND:				dat = &text_icon[0];		break;
						case	PASSWORD_KIND:
						case	INTEGER_KIND:
							case	FLOAT_KIND:
						case	STRING_KIND:			dat = &string_icon[0];		break;
						default:						dat = &color_icon[0];		break;
					}

					ic = new PrefilledBitmap(BRect(0,0,31,23),B_RGB32,dat,0,false,false);

					if (!inside)
					{
						xt->AddUnder(nw = new TListItem(wi,gd,ic,name),it);
					}
						else
					{
						it = FindGadget(inside);

						xt->AddUnder(nw = new TListItem(wi,gd,ic,name),it);
					}	
						
					xt->MoveItem(xt->IndexOf(nw),xt->IndexOf(nw) + xt->CountItemsUnder(it,true));

					Unlock();
					
					return;
				}
			}		
		}
	}

	Unlock();
}

TListItem *
PrjWindow::FindGadget(struct MyGadget *gd)
{
	TListItem *it;
	int k;
	
	for (k = 0; k < xt->CountItems(); k++)
	{
		if (it = (TListItem *)xt->ItemAt(k))
		{
			if (it->gad == gd)
			{
				return(it);
			}
		}
	}
	
	return NULL;
}				

void
PrjWindow::ChooseGadget(struct MyGadget *gd)
{
	TListItem *it;
	int k;
	
	Lock();

	if (!gd)
	{
		k = xt->CurrentSelection();

		xt->DeselectAll();

		xt->InvalidateItem(k);
	}
		else
	{
		for (k = 0; k < xt->CountItems(); k++)
		{
			if (it = (TListItem *)xt->ItemAt(k))
			{
				if (it->OutlineLevel())
				{
					if (it->gad == gd)
					{
						xt->Select(xt->IndexOf(it));
			
						xt->InvalidateItem(xt->IndexOf(it));

						Unlock();

						return;
					}
				}		
			}
		}
	}

	Unlock();
}

void
PrjWindow::RemoveGadget(WrkWindow *wi,struct MyGadget *gd)
{
	TListItem *it;
	BBitmap *ic;

	int k;
	
	Lock();

	for (k = 0; k < xt->CountItems(); k++)
	{
		if (it = (TListItem *)xt->ItemAt(k))
		{
			if (it->OutlineLevel())
			{
				if (it->gad == gd)
				{
					xt->RemoveItem(it);

					Unlock();

					return;
				}
			}		
		}
	}

	Unlock();
}

void
PrjWindow::RemoveWindow(WrkWindow *wi)
{
	TListItem *it;
	BBitmap *ic;

	int k;
	
	Lock();

	for (k = 0; k < xt->CountItems(); k++)
	{
		if (it = (TListItem *)xt->ItemAt(k))
		{
			if (!it->OutlineLevel())
			{
				if (it->win == wi)
				{
					xt->RemoveItem(it);

					Unlock();

					return;
				}
			}		
		}
	}

	Unlock();
}

void
create_projet_window(void)
{
	if (!PrjWin)
	{
		PrjWin = new PrjWindow(prefs.projrect);

		PrjWin->Show();

		set_projet_update();
	}
		else
	{
		PrjWin->Show();

		PrjWin->Activate();
	}	
}
